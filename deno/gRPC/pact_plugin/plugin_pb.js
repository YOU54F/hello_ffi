// source: proto/plugin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

import * as jspb from 'https://deno.land/x/deno_google_protobuf/google-protobuf.js'
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

import * as google_protobuf_struct_pb from 'https://deno.land/x/deno_google_protobuf/google/protobuf/struct_pb.js'
goog.object.extend(proto, google_protobuf_struct_pb);
import * as google_protobuf_wrappers_pb from 'https://deno.land/x/deno_google_protobuf/google/protobuf/wrappers_pb.js'
goog.object.extend(proto, google_protobuf_wrappers_pb);
import * as google_protobuf_empty_pb from 'https://deno.land/x/deno_google_protobuf/google/protobuf/empty_pb.js'
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.io.pact.plugin.Body', null, global);
goog.exportSymbol('proto.io.pact.plugin.Body.ContentTypeHint', null, global);
goog.exportSymbol('proto.io.pact.plugin.Catalogue', null, global);
goog.exportSymbol('proto.io.pact.plugin.CatalogueEntry', null, global);
goog.exportSymbol('proto.io.pact.plugin.CatalogueEntry.EntryType', null, global);
goog.exportSymbol('proto.io.pact.plugin.CompareContentsRequest', null, global);
goog.exportSymbol('proto.io.pact.plugin.CompareContentsResponse', null, global);
goog.exportSymbol('proto.io.pact.plugin.ConfigureInteractionRequest', null, global);
goog.exportSymbol('proto.io.pact.plugin.ConfigureInteractionResponse', null, global);
goog.exportSymbol('proto.io.pact.plugin.ContentMismatch', null, global);
goog.exportSymbol('proto.io.pact.plugin.ContentMismatches', null, global);
goog.exportSymbol('proto.io.pact.plugin.ContentTypeMismatch', null, global);
goog.exportSymbol('proto.io.pact.plugin.GenerateContentRequest', null, global);
goog.exportSymbol('proto.io.pact.plugin.GenerateContentResponse', null, global);
goog.exportSymbol('proto.io.pact.plugin.Generator', null, global);
goog.exportSymbol('proto.io.pact.plugin.InitPluginRequest', null, global);
goog.exportSymbol('proto.io.pact.plugin.InitPluginResponse', null, global);
goog.exportSymbol('proto.io.pact.plugin.InteractionData', null, global);
goog.exportSymbol('proto.io.pact.plugin.InteractionResponse', null, global);
goog.exportSymbol('proto.io.pact.plugin.InteractionResponse.MarkupType', null, global);
goog.exportSymbol('proto.io.pact.plugin.MatchingRule', null, global);
goog.exportSymbol('proto.io.pact.plugin.MatchingRules', null, global);
goog.exportSymbol('proto.io.pact.plugin.MetadataValue', null, global);
goog.exportSymbol('proto.io.pact.plugin.MetadataValue.ValueCase', null, global);
goog.exportSymbol('proto.io.pact.plugin.MockServerDetails', null, global);
goog.exportSymbol('proto.io.pact.plugin.MockServerRequest', null, global);
goog.exportSymbol('proto.io.pact.plugin.MockServerResult', null, global);
goog.exportSymbol('proto.io.pact.plugin.MockServerResults', null, global);
goog.exportSymbol('proto.io.pact.plugin.PluginConfiguration', null, global);
goog.exportSymbol('proto.io.pact.plugin.ShutdownMockServerRequest', null, global);
goog.exportSymbol('proto.io.pact.plugin.ShutdownMockServerResponse', null, global);
goog.exportSymbol('proto.io.pact.plugin.StartMockServerRequest', null, global);
goog.exportSymbol('proto.io.pact.plugin.StartMockServerResponse', null, global);
goog.exportSymbol('proto.io.pact.plugin.StartMockServerResponse.ResponseCase', null, global);
goog.exportSymbol('proto.io.pact.plugin.VerificationPreparationRequest', null, global);
goog.exportSymbol('proto.io.pact.plugin.VerificationPreparationResponse', null, global);
goog.exportSymbol('proto.io.pact.plugin.VerificationPreparationResponse.ResponseCase', null, global);
goog.exportSymbol('proto.io.pact.plugin.VerificationResult', null, global);
goog.exportSymbol('proto.io.pact.plugin.VerificationResultItem', null, global);
goog.exportSymbol('proto.io.pact.plugin.VerificationResultItem.ResultCase', null, global);
goog.exportSymbol('proto.io.pact.plugin.VerifyInteractionRequest', null, global);
goog.exportSymbol('proto.io.pact.plugin.VerifyInteractionResponse', null, global);
goog.exportSymbol('proto.io.pact.plugin.VerifyInteractionResponse.ResponseCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.InitPluginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.InitPluginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.InitPluginRequest.displayName = 'proto.io.pact.plugin.InitPluginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.CatalogueEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.CatalogueEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.CatalogueEntry.displayName = 'proto.io.pact.plugin.CatalogueEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.InitPluginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.pact.plugin.InitPluginResponse.repeatedFields_, null);
};
goog.inherits(proto.io.pact.plugin.InitPluginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.InitPluginResponse.displayName = 'proto.io.pact.plugin.InitPluginResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.Catalogue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.pact.plugin.Catalogue.repeatedFields_, null);
};
goog.inherits(proto.io.pact.plugin.Catalogue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.Catalogue.displayName = 'proto.io.pact.plugin.Catalogue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.Body = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.Body, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.Body.displayName = 'proto.io.pact.plugin.Body';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.CompareContentsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.CompareContentsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.CompareContentsRequest.displayName = 'proto.io.pact.plugin.CompareContentsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.ContentTypeMismatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.ContentTypeMismatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.ContentTypeMismatch.displayName = 'proto.io.pact.plugin.ContentTypeMismatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.ContentMismatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.ContentMismatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.ContentMismatch.displayName = 'proto.io.pact.plugin.ContentMismatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.ContentMismatches = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.pact.plugin.ContentMismatches.repeatedFields_, null);
};
goog.inherits(proto.io.pact.plugin.ContentMismatches, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.ContentMismatches.displayName = 'proto.io.pact.plugin.ContentMismatches';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.CompareContentsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.CompareContentsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.CompareContentsResponse.displayName = 'proto.io.pact.plugin.CompareContentsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.ConfigureInteractionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.ConfigureInteractionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.ConfigureInteractionRequest.displayName = 'proto.io.pact.plugin.ConfigureInteractionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.MatchingRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.MatchingRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.MatchingRule.displayName = 'proto.io.pact.plugin.MatchingRule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.MatchingRules = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.pact.plugin.MatchingRules.repeatedFields_, null);
};
goog.inherits(proto.io.pact.plugin.MatchingRules, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.MatchingRules.displayName = 'proto.io.pact.plugin.MatchingRules';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.Generator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.Generator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.Generator.displayName = 'proto.io.pact.plugin.Generator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.PluginConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.PluginConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.PluginConfiguration.displayName = 'proto.io.pact.plugin.PluginConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.InteractionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.InteractionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.InteractionResponse.displayName = 'proto.io.pact.plugin.InteractionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.ConfigureInteractionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.pact.plugin.ConfigureInteractionResponse.repeatedFields_, null);
};
goog.inherits(proto.io.pact.plugin.ConfigureInteractionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.ConfigureInteractionResponse.displayName = 'proto.io.pact.plugin.ConfigureInteractionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.GenerateContentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.GenerateContentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.GenerateContentRequest.displayName = 'proto.io.pact.plugin.GenerateContentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.GenerateContentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.GenerateContentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.GenerateContentResponse.displayName = 'proto.io.pact.plugin.GenerateContentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.StartMockServerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.StartMockServerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.StartMockServerRequest.displayName = 'proto.io.pact.plugin.StartMockServerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.StartMockServerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.pact.plugin.StartMockServerResponse.oneofGroups_);
};
goog.inherits(proto.io.pact.plugin.StartMockServerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.StartMockServerResponse.displayName = 'proto.io.pact.plugin.StartMockServerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.MockServerDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.MockServerDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.MockServerDetails.displayName = 'proto.io.pact.plugin.MockServerDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.ShutdownMockServerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.ShutdownMockServerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.ShutdownMockServerRequest.displayName = 'proto.io.pact.plugin.ShutdownMockServerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.MockServerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.MockServerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.MockServerRequest.displayName = 'proto.io.pact.plugin.MockServerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.MockServerResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.pact.plugin.MockServerResult.repeatedFields_, null);
};
goog.inherits(proto.io.pact.plugin.MockServerResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.MockServerResult.displayName = 'proto.io.pact.plugin.MockServerResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.ShutdownMockServerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.pact.plugin.ShutdownMockServerResponse.repeatedFields_, null);
};
goog.inherits(proto.io.pact.plugin.ShutdownMockServerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.ShutdownMockServerResponse.displayName = 'proto.io.pact.plugin.ShutdownMockServerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.MockServerResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.pact.plugin.MockServerResults.repeatedFields_, null);
};
goog.inherits(proto.io.pact.plugin.MockServerResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.MockServerResults.displayName = 'proto.io.pact.plugin.MockServerResults';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.VerificationPreparationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.VerificationPreparationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.VerificationPreparationRequest.displayName = 'proto.io.pact.plugin.VerificationPreparationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.MetadataValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.pact.plugin.MetadataValue.oneofGroups_);
};
goog.inherits(proto.io.pact.plugin.MetadataValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.MetadataValue.displayName = 'proto.io.pact.plugin.MetadataValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.InteractionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.InteractionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.InteractionData.displayName = 'proto.io.pact.plugin.InteractionData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.VerificationPreparationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.pact.plugin.VerificationPreparationResponse.oneofGroups_);
};
goog.inherits(proto.io.pact.plugin.VerificationPreparationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.VerificationPreparationResponse.displayName = 'proto.io.pact.plugin.VerificationPreparationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.VerifyInteractionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.pact.plugin.VerifyInteractionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.VerifyInteractionRequest.displayName = 'proto.io.pact.plugin.VerifyInteractionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.VerificationResultItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.pact.plugin.VerificationResultItem.oneofGroups_);
};
goog.inherits(proto.io.pact.plugin.VerificationResultItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.VerificationResultItem.displayName = 'proto.io.pact.plugin.VerificationResultItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.VerificationResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.pact.plugin.VerificationResult.repeatedFields_, null);
};
goog.inherits(proto.io.pact.plugin.VerificationResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.VerificationResult.displayName = 'proto.io.pact.plugin.VerificationResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.pact.plugin.VerifyInteractionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.pact.plugin.VerifyInteractionResponse.oneofGroups_);
};
goog.inherits(proto.io.pact.plugin.VerifyInteractionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.pact.plugin.VerifyInteractionResponse.displayName = 'proto.io.pact.plugin.VerifyInteractionResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.InitPluginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.InitPluginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.InitPluginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.InitPluginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    implementation: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.InitPluginRequest}
 */
proto.io.pact.plugin.InitPluginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.InitPluginRequest;
  return proto.io.pact.plugin.InitPluginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.InitPluginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.InitPluginRequest}
 */
proto.io.pact.plugin.InitPluginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImplementation(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.InitPluginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.InitPluginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.InitPluginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.InitPluginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImplementation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string implementation = 1;
 * @return {string}
 */
proto.io.pact.plugin.InitPluginRequest.prototype.getImplementation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.InitPluginRequest} returns this
 */
proto.io.pact.plugin.InitPluginRequest.prototype.setImplementation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.io.pact.plugin.InitPluginRequest.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.InitPluginRequest} returns this
 */
proto.io.pact.plugin.InitPluginRequest.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.CatalogueEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.CatalogueEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.CatalogueEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.CatalogueEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    valuesMap: (f = msg.getValuesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.CatalogueEntry}
 */
proto.io.pact.plugin.CatalogueEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.CatalogueEntry;
  return proto.io.pact.plugin.CatalogueEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.CatalogueEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.CatalogueEntry}
 */
proto.io.pact.plugin.CatalogueEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.io.pact.plugin.CatalogueEntry.EntryType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = msg.getValuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.CatalogueEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.CatalogueEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.CatalogueEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.CatalogueEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * @enum {number}
 */
proto.io.pact.plugin.CatalogueEntry.EntryType = {
  CONTENT_MATCHER: 0,
  CONTENT_GENERATOR: 1,
  TRANSPORT: 2,
  MATCHER: 3,
  INTERACTION: 4
};

/**
 * optional EntryType type = 1;
 * @return {!proto.io.pact.plugin.CatalogueEntry.EntryType}
 */
proto.io.pact.plugin.CatalogueEntry.prototype.getType = function() {
  return /** @type {!proto.io.pact.plugin.CatalogueEntry.EntryType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.io.pact.plugin.CatalogueEntry.EntryType} value
 * @return {!proto.io.pact.plugin.CatalogueEntry} returns this
 */
proto.io.pact.plugin.CatalogueEntry.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.io.pact.plugin.CatalogueEntry.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.CatalogueEntry} returns this
 */
proto.io.pact.plugin.CatalogueEntry.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> values = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.io.pact.plugin.CatalogueEntry.prototype.getValuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.pact.plugin.CatalogueEntry} returns this
 */
proto.io.pact.plugin.CatalogueEntry.prototype.clearValuesMap = function() {
  this.getValuesMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.pact.plugin.InitPluginResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.InitPluginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.InitPluginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.InitPluginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.InitPluginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    catalogueList: jspb.Message.toObjectList(msg.getCatalogueList(),
    proto.io.pact.plugin.CatalogueEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.InitPluginResponse}
 */
proto.io.pact.plugin.InitPluginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.InitPluginResponse;
  return proto.io.pact.plugin.InitPluginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.InitPluginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.InitPluginResponse}
 */
proto.io.pact.plugin.InitPluginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.pact.plugin.CatalogueEntry;
      reader.readMessage(value,proto.io.pact.plugin.CatalogueEntry.deserializeBinaryFromReader);
      msg.addCatalogue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.InitPluginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.InitPluginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.InitPluginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.InitPluginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCatalogueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.pact.plugin.CatalogueEntry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CatalogueEntry catalogue = 1;
 * @return {!Array<!proto.io.pact.plugin.CatalogueEntry>}
 */
proto.io.pact.plugin.InitPluginResponse.prototype.getCatalogueList = function() {
  return /** @type{!Array<!proto.io.pact.plugin.CatalogueEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.pact.plugin.CatalogueEntry, 1));
};


/**
 * @param {!Array<!proto.io.pact.plugin.CatalogueEntry>} value
 * @return {!proto.io.pact.plugin.InitPluginResponse} returns this
*/
proto.io.pact.plugin.InitPluginResponse.prototype.setCatalogueList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.pact.plugin.CatalogueEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.pact.plugin.CatalogueEntry}
 */
proto.io.pact.plugin.InitPluginResponse.prototype.addCatalogue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.pact.plugin.CatalogueEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.pact.plugin.InitPluginResponse} returns this
 */
proto.io.pact.plugin.InitPluginResponse.prototype.clearCatalogueList = function() {
  return this.setCatalogueList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.pact.plugin.Catalogue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.Catalogue.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.Catalogue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.Catalogue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.Catalogue.toObject = function(includeInstance, msg) {
  var f, obj = {
    catalogueList: jspb.Message.toObjectList(msg.getCatalogueList(),
    proto.io.pact.plugin.CatalogueEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.Catalogue}
 */
proto.io.pact.plugin.Catalogue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.Catalogue;
  return proto.io.pact.plugin.Catalogue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.Catalogue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.Catalogue}
 */
proto.io.pact.plugin.Catalogue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.pact.plugin.CatalogueEntry;
      reader.readMessage(value,proto.io.pact.plugin.CatalogueEntry.deserializeBinaryFromReader);
      msg.addCatalogue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.Catalogue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.Catalogue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.Catalogue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.Catalogue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCatalogueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.pact.plugin.CatalogueEntry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CatalogueEntry catalogue = 1;
 * @return {!Array<!proto.io.pact.plugin.CatalogueEntry>}
 */
proto.io.pact.plugin.Catalogue.prototype.getCatalogueList = function() {
  return /** @type{!Array<!proto.io.pact.plugin.CatalogueEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.pact.plugin.CatalogueEntry, 1));
};


/**
 * @param {!Array<!proto.io.pact.plugin.CatalogueEntry>} value
 * @return {!proto.io.pact.plugin.Catalogue} returns this
*/
proto.io.pact.plugin.Catalogue.prototype.setCatalogueList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.pact.plugin.CatalogueEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.pact.plugin.CatalogueEntry}
 */
proto.io.pact.plugin.Catalogue.prototype.addCatalogue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.pact.plugin.CatalogueEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.pact.plugin.Catalogue} returns this
 */
proto.io.pact.plugin.Catalogue.prototype.clearCatalogueList = function() {
  return this.setCatalogueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.Body.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.Body.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.Body} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.Body.toObject = function(includeInstance, msg) {
  var f, obj = {
    contenttype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    content: (f = msg.getContent()) && google_protobuf_wrappers_pb.BytesValue.toObject(includeInstance, f),
    contenttypehint: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.Body}
 */
proto.io.pact.plugin.Body.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.Body;
  return proto.io.pact.plugin.Body.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.Body} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.Body}
 */
proto.io.pact.plugin.Body.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContenttype(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.BytesValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BytesValue.deserializeBinaryFromReader);
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {!proto.io.pact.plugin.Body.ContentTypeHint} */ (reader.readEnum());
      msg.setContenttypehint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.Body.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.Body.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.Body} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.Body.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContenttype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.BytesValue.serializeBinaryToWriter
    );
  }
  f = message.getContenttypehint();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.io.pact.plugin.Body.ContentTypeHint = {
  DEFAULT: 0,
  TEXT: 1,
  BINARY: 2
};

/**
 * optional string contentType = 1;
 * @return {string}
 */
proto.io.pact.plugin.Body.prototype.getContenttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.Body} returns this
 */
proto.io.pact.plugin.Body.prototype.setContenttype = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.BytesValue content = 2;
 * @return {?proto.google.protobuf.BytesValue}
 */
proto.io.pact.plugin.Body.prototype.getContent = function() {
  return /** @type{?proto.google.protobuf.BytesValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BytesValue, 2));
};


/**
 * @param {?proto.google.protobuf.BytesValue|undefined} value
 * @return {!proto.io.pact.plugin.Body} returns this
*/
proto.io.pact.plugin.Body.prototype.setContent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.Body} returns this
 */
proto.io.pact.plugin.Body.prototype.clearContent = function() {
  return this.setContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.Body.prototype.hasContent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ContentTypeHint contentTypeHint = 3;
 * @return {!proto.io.pact.plugin.Body.ContentTypeHint}
 */
proto.io.pact.plugin.Body.prototype.getContenttypehint = function() {
  return /** @type {!proto.io.pact.plugin.Body.ContentTypeHint} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.io.pact.plugin.Body.ContentTypeHint} value
 * @return {!proto.io.pact.plugin.Body} returns this
 */
proto.io.pact.plugin.Body.prototype.setContenttypehint = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.CompareContentsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.CompareContentsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.CompareContentsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    expected: (f = msg.getExpected()) && proto.io.pact.plugin.Body.toObject(includeInstance, f),
    actual: (f = msg.getActual()) && proto.io.pact.plugin.Body.toObject(includeInstance, f),
    allowUnexpectedKeys: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    rulesMap: (f = msg.getRulesMap()) ? f.toObject(includeInstance, proto.io.pact.plugin.MatchingRules.toObject) : [],
    pluginconfiguration: (f = msg.getPluginconfiguration()) && proto.io.pact.plugin.PluginConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.CompareContentsRequest}
 */
proto.io.pact.plugin.CompareContentsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.CompareContentsRequest;
  return proto.io.pact.plugin.CompareContentsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.CompareContentsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.CompareContentsRequest}
 */
proto.io.pact.plugin.CompareContentsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.pact.plugin.Body;
      reader.readMessage(value,proto.io.pact.plugin.Body.deserializeBinaryFromReader);
      msg.setExpected(value);
      break;
    case 2:
      var value = new proto.io.pact.plugin.Body;
      reader.readMessage(value,proto.io.pact.plugin.Body.deserializeBinaryFromReader);
      msg.setActual(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowUnexpectedKeys(value);
      break;
    case 4:
      var value = msg.getRulesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.io.pact.plugin.MatchingRules.deserializeBinaryFromReader, "", new proto.io.pact.plugin.MatchingRules());
         });
      break;
    case 5:
      var value = new proto.io.pact.plugin.PluginConfiguration;
      reader.readMessage(value,proto.io.pact.plugin.PluginConfiguration.deserializeBinaryFromReader);
      msg.setPluginconfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.CompareContentsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.CompareContentsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.CompareContentsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpected();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.pact.plugin.Body.serializeBinaryToWriter
    );
  }
  f = message.getActual();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.pact.plugin.Body.serializeBinaryToWriter
    );
  }
  f = message.getAllowUnexpectedKeys();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getRulesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.io.pact.plugin.MatchingRules.serializeBinaryToWriter);
  }
  f = message.getPluginconfiguration();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.io.pact.plugin.PluginConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional Body expected = 1;
 * @return {?proto.io.pact.plugin.Body}
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.getExpected = function() {
  return /** @type{?proto.io.pact.plugin.Body} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.Body, 1));
};


/**
 * @param {?proto.io.pact.plugin.Body|undefined} value
 * @return {!proto.io.pact.plugin.CompareContentsRequest} returns this
*/
proto.io.pact.plugin.CompareContentsRequest.prototype.setExpected = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.CompareContentsRequest} returns this
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.clearExpected = function() {
  return this.setExpected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.hasExpected = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Body actual = 2;
 * @return {?proto.io.pact.plugin.Body}
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.getActual = function() {
  return /** @type{?proto.io.pact.plugin.Body} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.Body, 2));
};


/**
 * @param {?proto.io.pact.plugin.Body|undefined} value
 * @return {!proto.io.pact.plugin.CompareContentsRequest} returns this
*/
proto.io.pact.plugin.CompareContentsRequest.prototype.setActual = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.CompareContentsRequest} returns this
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.clearActual = function() {
  return this.setActual(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.hasActual = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool allow_unexpected_keys = 3;
 * @return {boolean}
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.getAllowUnexpectedKeys = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.io.pact.plugin.CompareContentsRequest} returns this
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.setAllowUnexpectedKeys = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * map<string, MatchingRules> rules = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.io.pact.plugin.MatchingRules>}
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.getRulesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.io.pact.plugin.MatchingRules>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.io.pact.plugin.MatchingRules));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.pact.plugin.CompareContentsRequest} returns this
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.clearRulesMap = function() {
  this.getRulesMap().clear();
  return this;};


/**
 * optional PluginConfiguration pluginConfiguration = 5;
 * @return {?proto.io.pact.plugin.PluginConfiguration}
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.getPluginconfiguration = function() {
  return /** @type{?proto.io.pact.plugin.PluginConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.PluginConfiguration, 5));
};


/**
 * @param {?proto.io.pact.plugin.PluginConfiguration|undefined} value
 * @return {!proto.io.pact.plugin.CompareContentsRequest} returns this
*/
proto.io.pact.plugin.CompareContentsRequest.prototype.setPluginconfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.CompareContentsRequest} returns this
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.clearPluginconfiguration = function() {
  return this.setPluginconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.CompareContentsRequest.prototype.hasPluginconfiguration = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.ContentTypeMismatch.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.ContentTypeMismatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.ContentTypeMismatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ContentTypeMismatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    expected: jspb.Message.getFieldWithDefault(msg, 1, ""),
    actual: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.ContentTypeMismatch}
 */
proto.io.pact.plugin.ContentTypeMismatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.ContentTypeMismatch;
  return proto.io.pact.plugin.ContentTypeMismatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.ContentTypeMismatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.ContentTypeMismatch}
 */
proto.io.pact.plugin.ContentTypeMismatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpected(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActual(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.ContentTypeMismatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.ContentTypeMismatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.ContentTypeMismatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ContentTypeMismatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpected();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActual();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string expected = 1;
 * @return {string}
 */
proto.io.pact.plugin.ContentTypeMismatch.prototype.getExpected = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.ContentTypeMismatch} returns this
 */
proto.io.pact.plugin.ContentTypeMismatch.prototype.setExpected = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string actual = 2;
 * @return {string}
 */
proto.io.pact.plugin.ContentTypeMismatch.prototype.getActual = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.ContentTypeMismatch} returns this
 */
proto.io.pact.plugin.ContentTypeMismatch.prototype.setActual = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.ContentMismatch.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.ContentMismatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.ContentMismatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ContentMismatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    expected: (f = msg.getExpected()) && google_protobuf_wrappers_pb.BytesValue.toObject(includeInstance, f),
    actual: (f = msg.getActual()) && google_protobuf_wrappers_pb.BytesValue.toObject(includeInstance, f),
    mismatch: jspb.Message.getFieldWithDefault(msg, 3, ""),
    path: jspb.Message.getFieldWithDefault(msg, 4, ""),
    diff: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.ContentMismatch}
 */
proto.io.pact.plugin.ContentMismatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.ContentMismatch;
  return proto.io.pact.plugin.ContentMismatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.ContentMismatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.ContentMismatch}
 */
proto.io.pact.plugin.ContentMismatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_wrappers_pb.BytesValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BytesValue.deserializeBinaryFromReader);
      msg.setExpected(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.BytesValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BytesValue.deserializeBinaryFromReader);
      msg.setActual(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMismatch(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.ContentMismatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.ContentMismatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.ContentMismatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ContentMismatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpected();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.BytesValue.serializeBinaryToWriter
    );
  }
  f = message.getActual();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.BytesValue.serializeBinaryToWriter
    );
  }
  f = message.getMismatch();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDiff();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional google.protobuf.BytesValue expected = 1;
 * @return {?proto.google.protobuf.BytesValue}
 */
proto.io.pact.plugin.ContentMismatch.prototype.getExpected = function() {
  return /** @type{?proto.google.protobuf.BytesValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BytesValue, 1));
};


/**
 * @param {?proto.google.protobuf.BytesValue|undefined} value
 * @return {!proto.io.pact.plugin.ContentMismatch} returns this
*/
proto.io.pact.plugin.ContentMismatch.prototype.setExpected = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.ContentMismatch} returns this
 */
proto.io.pact.plugin.ContentMismatch.prototype.clearExpected = function() {
  return this.setExpected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.ContentMismatch.prototype.hasExpected = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.BytesValue actual = 2;
 * @return {?proto.google.protobuf.BytesValue}
 */
proto.io.pact.plugin.ContentMismatch.prototype.getActual = function() {
  return /** @type{?proto.google.protobuf.BytesValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BytesValue, 2));
};


/**
 * @param {?proto.google.protobuf.BytesValue|undefined} value
 * @return {!proto.io.pact.plugin.ContentMismatch} returns this
*/
proto.io.pact.plugin.ContentMismatch.prototype.setActual = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.ContentMismatch} returns this
 */
proto.io.pact.plugin.ContentMismatch.prototype.clearActual = function() {
  return this.setActual(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.ContentMismatch.prototype.hasActual = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string mismatch = 3;
 * @return {string}
 */
proto.io.pact.plugin.ContentMismatch.prototype.getMismatch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.ContentMismatch} returns this
 */
proto.io.pact.plugin.ContentMismatch.prototype.setMismatch = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string path = 4;
 * @return {string}
 */
proto.io.pact.plugin.ContentMismatch.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.ContentMismatch} returns this
 */
proto.io.pact.plugin.ContentMismatch.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string diff = 5;
 * @return {string}
 */
proto.io.pact.plugin.ContentMismatch.prototype.getDiff = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.ContentMismatch} returns this
 */
proto.io.pact.plugin.ContentMismatch.prototype.setDiff = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.pact.plugin.ContentMismatches.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.ContentMismatches.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.ContentMismatches.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.ContentMismatches} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ContentMismatches.toObject = function(includeInstance, msg) {
  var f, obj = {
    mismatchesList: jspb.Message.toObjectList(msg.getMismatchesList(),
    proto.io.pact.plugin.ContentMismatch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.ContentMismatches}
 */
proto.io.pact.plugin.ContentMismatches.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.ContentMismatches;
  return proto.io.pact.plugin.ContentMismatches.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.ContentMismatches} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.ContentMismatches}
 */
proto.io.pact.plugin.ContentMismatches.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.pact.plugin.ContentMismatch;
      reader.readMessage(value,proto.io.pact.plugin.ContentMismatch.deserializeBinaryFromReader);
      msg.addMismatches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.ContentMismatches.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.ContentMismatches.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.ContentMismatches} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ContentMismatches.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMismatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.pact.plugin.ContentMismatch.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ContentMismatch mismatches = 1;
 * @return {!Array<!proto.io.pact.plugin.ContentMismatch>}
 */
proto.io.pact.plugin.ContentMismatches.prototype.getMismatchesList = function() {
  return /** @type{!Array<!proto.io.pact.plugin.ContentMismatch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.pact.plugin.ContentMismatch, 1));
};


/**
 * @param {!Array<!proto.io.pact.plugin.ContentMismatch>} value
 * @return {!proto.io.pact.plugin.ContentMismatches} returns this
*/
proto.io.pact.plugin.ContentMismatches.prototype.setMismatchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.pact.plugin.ContentMismatch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.pact.plugin.ContentMismatch}
 */
proto.io.pact.plugin.ContentMismatches.prototype.addMismatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.pact.plugin.ContentMismatch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.pact.plugin.ContentMismatches} returns this
 */
proto.io.pact.plugin.ContentMismatches.prototype.clearMismatchesList = function() {
  return this.setMismatchesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.CompareContentsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.CompareContentsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.CompareContentsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.CompareContentsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    typemismatch: (f = msg.getTypemismatch()) && proto.io.pact.plugin.ContentTypeMismatch.toObject(includeInstance, f),
    resultsMap: (f = msg.getResultsMap()) ? f.toObject(includeInstance, proto.io.pact.plugin.ContentMismatches.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.CompareContentsResponse}
 */
proto.io.pact.plugin.CompareContentsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.CompareContentsResponse;
  return proto.io.pact.plugin.CompareContentsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.CompareContentsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.CompareContentsResponse}
 */
proto.io.pact.plugin.CompareContentsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = new proto.io.pact.plugin.ContentTypeMismatch;
      reader.readMessage(value,proto.io.pact.plugin.ContentTypeMismatch.deserializeBinaryFromReader);
      msg.setTypemismatch(value);
      break;
    case 3:
      var value = msg.getResultsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.io.pact.plugin.ContentMismatches.deserializeBinaryFromReader, "", new proto.io.pact.plugin.ContentMismatches());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.CompareContentsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.CompareContentsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.CompareContentsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.CompareContentsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTypemismatch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.pact.plugin.ContentTypeMismatch.serializeBinaryToWriter
    );
  }
  f = message.getResultsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.io.pact.plugin.ContentMismatches.serializeBinaryToWriter);
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.io.pact.plugin.CompareContentsResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.CompareContentsResponse} returns this
 */
proto.io.pact.plugin.CompareContentsResponse.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ContentTypeMismatch typeMismatch = 2;
 * @return {?proto.io.pact.plugin.ContentTypeMismatch}
 */
proto.io.pact.plugin.CompareContentsResponse.prototype.getTypemismatch = function() {
  return /** @type{?proto.io.pact.plugin.ContentTypeMismatch} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.ContentTypeMismatch, 2));
};


/**
 * @param {?proto.io.pact.plugin.ContentTypeMismatch|undefined} value
 * @return {!proto.io.pact.plugin.CompareContentsResponse} returns this
*/
proto.io.pact.plugin.CompareContentsResponse.prototype.setTypemismatch = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.CompareContentsResponse} returns this
 */
proto.io.pact.plugin.CompareContentsResponse.prototype.clearTypemismatch = function() {
  return this.setTypemismatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.CompareContentsResponse.prototype.hasTypemismatch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, ContentMismatches> results = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.io.pact.plugin.ContentMismatches>}
 */
proto.io.pact.plugin.CompareContentsResponse.prototype.getResultsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.io.pact.plugin.ContentMismatches>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.io.pact.plugin.ContentMismatches));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.pact.plugin.CompareContentsResponse} returns this
 */
proto.io.pact.plugin.CompareContentsResponse.prototype.clearResultsMap = function() {
  this.getResultsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.ConfigureInteractionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.ConfigureInteractionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.ConfigureInteractionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ConfigureInteractionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contenttype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contentsconfig: (f = msg.getContentsconfig()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.ConfigureInteractionRequest}
 */
proto.io.pact.plugin.ConfigureInteractionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.ConfigureInteractionRequest;
  return proto.io.pact.plugin.ConfigureInteractionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.ConfigureInteractionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.ConfigureInteractionRequest}
 */
proto.io.pact.plugin.ConfigureInteractionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContenttype(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setContentsconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.ConfigureInteractionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.ConfigureInteractionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.ConfigureInteractionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ConfigureInteractionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContenttype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContentsconfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contentType = 1;
 * @return {string}
 */
proto.io.pact.plugin.ConfigureInteractionRequest.prototype.getContenttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.ConfigureInteractionRequest} returns this
 */
proto.io.pact.plugin.ConfigureInteractionRequest.prototype.setContenttype = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Struct contentsConfig = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.io.pact.plugin.ConfigureInteractionRequest.prototype.getContentsconfig = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.io.pact.plugin.ConfigureInteractionRequest} returns this
*/
proto.io.pact.plugin.ConfigureInteractionRequest.prototype.setContentsconfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.ConfigureInteractionRequest} returns this
 */
proto.io.pact.plugin.ConfigureInteractionRequest.prototype.clearContentsconfig = function() {
  return this.setContentsconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.ConfigureInteractionRequest.prototype.hasContentsconfig = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.MatchingRule.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.MatchingRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.MatchingRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MatchingRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    values: (f = msg.getValues()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.MatchingRule}
 */
proto.io.pact.plugin.MatchingRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.MatchingRule;
  return proto.io.pact.plugin.MatchingRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.MatchingRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.MatchingRule}
 */
proto.io.pact.plugin.MatchingRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.MatchingRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.MatchingRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.MatchingRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MatchingRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.io.pact.plugin.MatchingRule.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.MatchingRule} returns this
 */
proto.io.pact.plugin.MatchingRule.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Struct values = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.io.pact.plugin.MatchingRule.prototype.getValues = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.io.pact.plugin.MatchingRule} returns this
*/
proto.io.pact.plugin.MatchingRule.prototype.setValues = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.MatchingRule} returns this
 */
proto.io.pact.plugin.MatchingRule.prototype.clearValues = function() {
  return this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.MatchingRule.prototype.hasValues = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.pact.plugin.MatchingRules.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.MatchingRules.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.MatchingRules.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.MatchingRules} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MatchingRules.toObject = function(includeInstance, msg) {
  var f, obj = {
    ruleList: jspb.Message.toObjectList(msg.getRuleList(),
    proto.io.pact.plugin.MatchingRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.MatchingRules}
 */
proto.io.pact.plugin.MatchingRules.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.MatchingRules;
  return proto.io.pact.plugin.MatchingRules.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.MatchingRules} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.MatchingRules}
 */
proto.io.pact.plugin.MatchingRules.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.pact.plugin.MatchingRule;
      reader.readMessage(value,proto.io.pact.plugin.MatchingRule.deserializeBinaryFromReader);
      msg.addRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.MatchingRules.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.MatchingRules.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.MatchingRules} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MatchingRules.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRuleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.pact.plugin.MatchingRule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MatchingRule rule = 1;
 * @return {!Array<!proto.io.pact.plugin.MatchingRule>}
 */
proto.io.pact.plugin.MatchingRules.prototype.getRuleList = function() {
  return /** @type{!Array<!proto.io.pact.plugin.MatchingRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.pact.plugin.MatchingRule, 1));
};


/**
 * @param {!Array<!proto.io.pact.plugin.MatchingRule>} value
 * @return {!proto.io.pact.plugin.MatchingRules} returns this
*/
proto.io.pact.plugin.MatchingRules.prototype.setRuleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.pact.plugin.MatchingRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.pact.plugin.MatchingRule}
 */
proto.io.pact.plugin.MatchingRules.prototype.addRule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.pact.plugin.MatchingRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.pact.plugin.MatchingRules} returns this
 */
proto.io.pact.plugin.MatchingRules.prototype.clearRuleList = function() {
  return this.setRuleList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.Generator.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.Generator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.Generator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.Generator.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    values: (f = msg.getValues()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.Generator}
 */
proto.io.pact.plugin.Generator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.Generator;
  return proto.io.pact.plugin.Generator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.Generator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.Generator}
 */
proto.io.pact.plugin.Generator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.Generator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.Generator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.Generator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.Generator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.io.pact.plugin.Generator.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.Generator} returns this
 */
proto.io.pact.plugin.Generator.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Struct values = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.io.pact.plugin.Generator.prototype.getValues = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.io.pact.plugin.Generator} returns this
*/
proto.io.pact.plugin.Generator.prototype.setValues = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.Generator} returns this
 */
proto.io.pact.plugin.Generator.prototype.clearValues = function() {
  return this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.Generator.prototype.hasValues = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.PluginConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.PluginConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.PluginConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.PluginConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    interactionconfiguration: (f = msg.getInteractionconfiguration()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    pactconfiguration: (f = msg.getPactconfiguration()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.PluginConfiguration}
 */
proto.io.pact.plugin.PluginConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.PluginConfiguration;
  return proto.io.pact.plugin.PluginConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.PluginConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.PluginConfiguration}
 */
proto.io.pact.plugin.PluginConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setInteractionconfiguration(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setPactconfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.PluginConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.PluginConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.PluginConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.PluginConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteractionconfiguration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getPactconfiguration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Struct interactionConfiguration = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.io.pact.plugin.PluginConfiguration.prototype.getInteractionconfiguration = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 1));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.io.pact.plugin.PluginConfiguration} returns this
*/
proto.io.pact.plugin.PluginConfiguration.prototype.setInteractionconfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.PluginConfiguration} returns this
 */
proto.io.pact.plugin.PluginConfiguration.prototype.clearInteractionconfiguration = function() {
  return this.setInteractionconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.PluginConfiguration.prototype.hasInteractionconfiguration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Struct pactConfiguration = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.io.pact.plugin.PluginConfiguration.prototype.getPactconfiguration = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.io.pact.plugin.PluginConfiguration} returns this
*/
proto.io.pact.plugin.PluginConfiguration.prototype.setPactconfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.PluginConfiguration} returns this
 */
proto.io.pact.plugin.PluginConfiguration.prototype.clearPactconfiguration = function() {
  return this.setPactconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.PluginConfiguration.prototype.hasPactconfiguration = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.InteractionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.InteractionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.InteractionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.InteractionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    contents: (f = msg.getContents()) && proto.io.pact.plugin.Body.toObject(includeInstance, f),
    rulesMap: (f = msg.getRulesMap()) ? f.toObject(includeInstance, proto.io.pact.plugin.MatchingRules.toObject) : [],
    generatorsMap: (f = msg.getGeneratorsMap()) ? f.toObject(includeInstance, proto.io.pact.plugin.Generator.toObject) : [],
    messagemetadata: (f = msg.getMessagemetadata()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    pluginconfiguration: (f = msg.getPluginconfiguration()) && proto.io.pact.plugin.PluginConfiguration.toObject(includeInstance, f),
    interactionmarkup: jspb.Message.getFieldWithDefault(msg, 6, ""),
    interactionmarkuptype: jspb.Message.getFieldWithDefault(msg, 7, 0),
    partname: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.InteractionResponse}
 */
proto.io.pact.plugin.InteractionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.InteractionResponse;
  return proto.io.pact.plugin.InteractionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.InteractionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.InteractionResponse}
 */
proto.io.pact.plugin.InteractionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.pact.plugin.Body;
      reader.readMessage(value,proto.io.pact.plugin.Body.deserializeBinaryFromReader);
      msg.setContents(value);
      break;
    case 2:
      var value = msg.getRulesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.io.pact.plugin.MatchingRules.deserializeBinaryFromReader, "", new proto.io.pact.plugin.MatchingRules());
         });
      break;
    case 3:
      var value = msg.getGeneratorsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.io.pact.plugin.Generator.deserializeBinaryFromReader, "", new proto.io.pact.plugin.Generator());
         });
      break;
    case 4:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setMessagemetadata(value);
      break;
    case 5:
      var value = new proto.io.pact.plugin.PluginConfiguration;
      reader.readMessage(value,proto.io.pact.plugin.PluginConfiguration.deserializeBinaryFromReader);
      msg.setPluginconfiguration(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractionmarkup(value);
      break;
    case 7:
      var value = /** @type {!proto.io.pact.plugin.InteractionResponse.MarkupType} */ (reader.readEnum());
      msg.setInteractionmarkuptype(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.InteractionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.InteractionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.InteractionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.InteractionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContents();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.pact.plugin.Body.serializeBinaryToWriter
    );
  }
  f = message.getRulesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.io.pact.plugin.MatchingRules.serializeBinaryToWriter);
  }
  f = message.getGeneratorsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.io.pact.plugin.Generator.serializeBinaryToWriter);
  }
  f = message.getMessagemetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getPluginconfiguration();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.io.pact.plugin.PluginConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getInteractionmarkup();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getInteractionmarkuptype();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getPartname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.io.pact.plugin.InteractionResponse.MarkupType = {
  COMMON_MARK: 0,
  HTML: 1
};

/**
 * optional Body contents = 1;
 * @return {?proto.io.pact.plugin.Body}
 */
proto.io.pact.plugin.InteractionResponse.prototype.getContents = function() {
  return /** @type{?proto.io.pact.plugin.Body} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.Body, 1));
};


/**
 * @param {?proto.io.pact.plugin.Body|undefined} value
 * @return {!proto.io.pact.plugin.InteractionResponse} returns this
*/
proto.io.pact.plugin.InteractionResponse.prototype.setContents = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.InteractionResponse} returns this
 */
proto.io.pact.plugin.InteractionResponse.prototype.clearContents = function() {
  return this.setContents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.InteractionResponse.prototype.hasContents = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, MatchingRules> rules = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.io.pact.plugin.MatchingRules>}
 */
proto.io.pact.plugin.InteractionResponse.prototype.getRulesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.io.pact.plugin.MatchingRules>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.io.pact.plugin.MatchingRules));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.pact.plugin.InteractionResponse} returns this
 */
proto.io.pact.plugin.InteractionResponse.prototype.clearRulesMap = function() {
  this.getRulesMap().clear();
  return this;};


/**
 * map<string, Generator> generators = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.io.pact.plugin.Generator>}
 */
proto.io.pact.plugin.InteractionResponse.prototype.getGeneratorsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.io.pact.plugin.Generator>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.io.pact.plugin.Generator));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.pact.plugin.InteractionResponse} returns this
 */
proto.io.pact.plugin.InteractionResponse.prototype.clearGeneratorsMap = function() {
  this.getGeneratorsMap().clear();
  return this;};


/**
 * optional google.protobuf.Struct messageMetadata = 4;
 * @return {?proto.google.protobuf.Struct}
 */
proto.io.pact.plugin.InteractionResponse.prototype.getMessagemetadata = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 4));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.io.pact.plugin.InteractionResponse} returns this
*/
proto.io.pact.plugin.InteractionResponse.prototype.setMessagemetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.InteractionResponse} returns this
 */
proto.io.pact.plugin.InteractionResponse.prototype.clearMessagemetadata = function() {
  return this.setMessagemetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.InteractionResponse.prototype.hasMessagemetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PluginConfiguration pluginConfiguration = 5;
 * @return {?proto.io.pact.plugin.PluginConfiguration}
 */
proto.io.pact.plugin.InteractionResponse.prototype.getPluginconfiguration = function() {
  return /** @type{?proto.io.pact.plugin.PluginConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.PluginConfiguration, 5));
};


/**
 * @param {?proto.io.pact.plugin.PluginConfiguration|undefined} value
 * @return {!proto.io.pact.plugin.InteractionResponse} returns this
*/
proto.io.pact.plugin.InteractionResponse.prototype.setPluginconfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.InteractionResponse} returns this
 */
proto.io.pact.plugin.InteractionResponse.prototype.clearPluginconfiguration = function() {
  return this.setPluginconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.InteractionResponse.prototype.hasPluginconfiguration = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string interactionMarkup = 6;
 * @return {string}
 */
proto.io.pact.plugin.InteractionResponse.prototype.getInteractionmarkup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.InteractionResponse} returns this
 */
proto.io.pact.plugin.InteractionResponse.prototype.setInteractionmarkup = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional MarkupType interactionMarkupType = 7;
 * @return {!proto.io.pact.plugin.InteractionResponse.MarkupType}
 */
proto.io.pact.plugin.InteractionResponse.prototype.getInteractionmarkuptype = function() {
  return /** @type {!proto.io.pact.plugin.InteractionResponse.MarkupType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.io.pact.plugin.InteractionResponse.MarkupType} value
 * @return {!proto.io.pact.plugin.InteractionResponse} returns this
 */
proto.io.pact.plugin.InteractionResponse.prototype.setInteractionmarkuptype = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional string partName = 8;
 * @return {string}
 */
proto.io.pact.plugin.InteractionResponse.prototype.getPartname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.InteractionResponse} returns this
 */
proto.io.pact.plugin.InteractionResponse.prototype.setPartname = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.pact.plugin.ConfigureInteractionResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.ConfigureInteractionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.ConfigureInteractionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.ConfigureInteractionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ConfigureInteractionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    interactionList: jspb.Message.toObjectList(msg.getInteractionList(),
    proto.io.pact.plugin.InteractionResponse.toObject, includeInstance),
    pluginconfiguration: (f = msg.getPluginconfiguration()) && proto.io.pact.plugin.PluginConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.ConfigureInteractionResponse}
 */
proto.io.pact.plugin.ConfigureInteractionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.ConfigureInteractionResponse;
  return proto.io.pact.plugin.ConfigureInteractionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.ConfigureInteractionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.ConfigureInteractionResponse}
 */
proto.io.pact.plugin.ConfigureInteractionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = new proto.io.pact.plugin.InteractionResponse;
      reader.readMessage(value,proto.io.pact.plugin.InteractionResponse.deserializeBinaryFromReader);
      msg.addInteraction(value);
      break;
    case 3:
      var value = new proto.io.pact.plugin.PluginConfiguration;
      reader.readMessage(value,proto.io.pact.plugin.PluginConfiguration.deserializeBinaryFromReader);
      msg.setPluginconfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.ConfigureInteractionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.ConfigureInteractionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.ConfigureInteractionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ConfigureInteractionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInteractionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.pact.plugin.InteractionResponse.serializeBinaryToWriter
    );
  }
  f = message.getPluginconfiguration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.pact.plugin.PluginConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.io.pact.plugin.ConfigureInteractionResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.ConfigureInteractionResponse} returns this
 */
proto.io.pact.plugin.ConfigureInteractionResponse.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated InteractionResponse interaction = 2;
 * @return {!Array<!proto.io.pact.plugin.InteractionResponse>}
 */
proto.io.pact.plugin.ConfigureInteractionResponse.prototype.getInteractionList = function() {
  return /** @type{!Array<!proto.io.pact.plugin.InteractionResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.pact.plugin.InteractionResponse, 2));
};


/**
 * @param {!Array<!proto.io.pact.plugin.InteractionResponse>} value
 * @return {!proto.io.pact.plugin.ConfigureInteractionResponse} returns this
*/
proto.io.pact.plugin.ConfigureInteractionResponse.prototype.setInteractionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.io.pact.plugin.InteractionResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.pact.plugin.InteractionResponse}
 */
proto.io.pact.plugin.ConfigureInteractionResponse.prototype.addInteraction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.io.pact.plugin.InteractionResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.pact.plugin.ConfigureInteractionResponse} returns this
 */
proto.io.pact.plugin.ConfigureInteractionResponse.prototype.clearInteractionList = function() {
  return this.setInteractionList([]);
};


/**
 * optional PluginConfiguration pluginConfiguration = 3;
 * @return {?proto.io.pact.plugin.PluginConfiguration}
 */
proto.io.pact.plugin.ConfigureInteractionResponse.prototype.getPluginconfiguration = function() {
  return /** @type{?proto.io.pact.plugin.PluginConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.PluginConfiguration, 3));
};


/**
 * @param {?proto.io.pact.plugin.PluginConfiguration|undefined} value
 * @return {!proto.io.pact.plugin.ConfigureInteractionResponse} returns this
*/
proto.io.pact.plugin.ConfigureInteractionResponse.prototype.setPluginconfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.ConfigureInteractionResponse} returns this
 */
proto.io.pact.plugin.ConfigureInteractionResponse.prototype.clearPluginconfiguration = function() {
  return this.setPluginconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.ConfigureInteractionResponse.prototype.hasPluginconfiguration = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.GenerateContentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.GenerateContentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.GenerateContentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.GenerateContentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contents: (f = msg.getContents()) && proto.io.pact.plugin.Body.toObject(includeInstance, f),
    generatorsMap: (f = msg.getGeneratorsMap()) ? f.toObject(includeInstance, proto.io.pact.plugin.Generator.toObject) : [],
    pluginconfiguration: (f = msg.getPluginconfiguration()) && proto.io.pact.plugin.PluginConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.GenerateContentRequest}
 */
proto.io.pact.plugin.GenerateContentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.GenerateContentRequest;
  return proto.io.pact.plugin.GenerateContentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.GenerateContentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.GenerateContentRequest}
 */
proto.io.pact.plugin.GenerateContentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.pact.plugin.Body;
      reader.readMessage(value,proto.io.pact.plugin.Body.deserializeBinaryFromReader);
      msg.setContents(value);
      break;
    case 2:
      var value = msg.getGeneratorsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.io.pact.plugin.Generator.deserializeBinaryFromReader, "", new proto.io.pact.plugin.Generator());
         });
      break;
    case 3:
      var value = new proto.io.pact.plugin.PluginConfiguration;
      reader.readMessage(value,proto.io.pact.plugin.PluginConfiguration.deserializeBinaryFromReader);
      msg.setPluginconfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.GenerateContentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.GenerateContentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.GenerateContentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.GenerateContentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContents();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.pact.plugin.Body.serializeBinaryToWriter
    );
  }
  f = message.getGeneratorsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.io.pact.plugin.Generator.serializeBinaryToWriter);
  }
  f = message.getPluginconfiguration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.pact.plugin.PluginConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional Body contents = 1;
 * @return {?proto.io.pact.plugin.Body}
 */
proto.io.pact.plugin.GenerateContentRequest.prototype.getContents = function() {
  return /** @type{?proto.io.pact.plugin.Body} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.Body, 1));
};


/**
 * @param {?proto.io.pact.plugin.Body|undefined} value
 * @return {!proto.io.pact.plugin.GenerateContentRequest} returns this
*/
proto.io.pact.plugin.GenerateContentRequest.prototype.setContents = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.GenerateContentRequest} returns this
 */
proto.io.pact.plugin.GenerateContentRequest.prototype.clearContents = function() {
  return this.setContents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.GenerateContentRequest.prototype.hasContents = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, Generator> generators = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.io.pact.plugin.Generator>}
 */
proto.io.pact.plugin.GenerateContentRequest.prototype.getGeneratorsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.io.pact.plugin.Generator>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.io.pact.plugin.Generator));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.pact.plugin.GenerateContentRequest} returns this
 */
proto.io.pact.plugin.GenerateContentRequest.prototype.clearGeneratorsMap = function() {
  this.getGeneratorsMap().clear();
  return this;};


/**
 * optional PluginConfiguration pluginConfiguration = 3;
 * @return {?proto.io.pact.plugin.PluginConfiguration}
 */
proto.io.pact.plugin.GenerateContentRequest.prototype.getPluginconfiguration = function() {
  return /** @type{?proto.io.pact.plugin.PluginConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.PluginConfiguration, 3));
};


/**
 * @param {?proto.io.pact.plugin.PluginConfiguration|undefined} value
 * @return {!proto.io.pact.plugin.GenerateContentRequest} returns this
*/
proto.io.pact.plugin.GenerateContentRequest.prototype.setPluginconfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.GenerateContentRequest} returns this
 */
proto.io.pact.plugin.GenerateContentRequest.prototype.clearPluginconfiguration = function() {
  return this.setPluginconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.GenerateContentRequest.prototype.hasPluginconfiguration = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.GenerateContentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.GenerateContentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.GenerateContentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.GenerateContentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    contents: (f = msg.getContents()) && proto.io.pact.plugin.Body.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.GenerateContentResponse}
 */
proto.io.pact.plugin.GenerateContentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.GenerateContentResponse;
  return proto.io.pact.plugin.GenerateContentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.GenerateContentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.GenerateContentResponse}
 */
proto.io.pact.plugin.GenerateContentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.pact.plugin.Body;
      reader.readMessage(value,proto.io.pact.plugin.Body.deserializeBinaryFromReader);
      msg.setContents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.GenerateContentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.GenerateContentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.GenerateContentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.GenerateContentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContents();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.pact.plugin.Body.serializeBinaryToWriter
    );
  }
};


/**
 * optional Body contents = 1;
 * @return {?proto.io.pact.plugin.Body}
 */
proto.io.pact.plugin.GenerateContentResponse.prototype.getContents = function() {
  return /** @type{?proto.io.pact.plugin.Body} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.Body, 1));
};


/**
 * @param {?proto.io.pact.plugin.Body|undefined} value
 * @return {!proto.io.pact.plugin.GenerateContentResponse} returns this
*/
proto.io.pact.plugin.GenerateContentResponse.prototype.setContents = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.GenerateContentResponse} returns this
 */
proto.io.pact.plugin.GenerateContentResponse.prototype.clearContents = function() {
  return this.setContents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.GenerateContentResponse.prototype.hasContents = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.StartMockServerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.StartMockServerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.StartMockServerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.StartMockServerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostinterface: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tls: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    pact: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.StartMockServerRequest}
 */
proto.io.pact.plugin.StartMockServerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.StartMockServerRequest;
  return proto.io.pact.plugin.StartMockServerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.StartMockServerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.StartMockServerRequest}
 */
proto.io.pact.plugin.StartMockServerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostinterface(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTls(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.StartMockServerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.StartMockServerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.StartMockServerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.StartMockServerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHostinterface();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTls();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPact();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string hostInterface = 1;
 * @return {string}
 */
proto.io.pact.plugin.StartMockServerRequest.prototype.getHostinterface = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.StartMockServerRequest} returns this
 */
proto.io.pact.plugin.StartMockServerRequest.prototype.setHostinterface = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.io.pact.plugin.StartMockServerRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.pact.plugin.StartMockServerRequest} returns this
 */
proto.io.pact.plugin.StartMockServerRequest.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool tls = 3;
 * @return {boolean}
 */
proto.io.pact.plugin.StartMockServerRequest.prototype.getTls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.io.pact.plugin.StartMockServerRequest} returns this
 */
proto.io.pact.plugin.StartMockServerRequest.prototype.setTls = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string pact = 4;
 * @return {string}
 */
proto.io.pact.plugin.StartMockServerRequest.prototype.getPact = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.StartMockServerRequest} returns this
 */
proto.io.pact.plugin.StartMockServerRequest.prototype.setPact = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.pact.plugin.StartMockServerResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.io.pact.plugin.StartMockServerResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  ERROR: 1,
  DETAILS: 2
};

/**
 * @return {proto.io.pact.plugin.StartMockServerResponse.ResponseCase}
 */
proto.io.pact.plugin.StartMockServerResponse.prototype.getResponseCase = function() {
  return /** @type {proto.io.pact.plugin.StartMockServerResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.io.pact.plugin.StartMockServerResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.StartMockServerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.StartMockServerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.StartMockServerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.StartMockServerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    details: (f = msg.getDetails()) && proto.io.pact.plugin.MockServerDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.StartMockServerResponse}
 */
proto.io.pact.plugin.StartMockServerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.StartMockServerResponse;
  return proto.io.pact.plugin.StartMockServerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.StartMockServerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.StartMockServerResponse}
 */
proto.io.pact.plugin.StartMockServerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = new proto.io.pact.plugin.MockServerDetails;
      reader.readMessage(value,proto.io.pact.plugin.MockServerDetails.deserializeBinaryFromReader);
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.StartMockServerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.StartMockServerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.StartMockServerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.StartMockServerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDetails();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.pact.plugin.MockServerDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.io.pact.plugin.StartMockServerResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.StartMockServerResponse} returns this
 */
proto.io.pact.plugin.StartMockServerResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.io.pact.plugin.StartMockServerResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.pact.plugin.StartMockServerResponse} returns this
 */
proto.io.pact.plugin.StartMockServerResponse.prototype.clearError = function() {
  return jspb.Message.setOneofField(this, 1, proto.io.pact.plugin.StartMockServerResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.StartMockServerResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MockServerDetails details = 2;
 * @return {?proto.io.pact.plugin.MockServerDetails}
 */
proto.io.pact.plugin.StartMockServerResponse.prototype.getDetails = function() {
  return /** @type{?proto.io.pact.plugin.MockServerDetails} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.MockServerDetails, 2));
};


/**
 * @param {?proto.io.pact.plugin.MockServerDetails|undefined} value
 * @return {!proto.io.pact.plugin.StartMockServerResponse} returns this
*/
proto.io.pact.plugin.StartMockServerResponse.prototype.setDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.io.pact.plugin.StartMockServerResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.StartMockServerResponse} returns this
 */
proto.io.pact.plugin.StartMockServerResponse.prototype.clearDetails = function() {
  return this.setDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.StartMockServerResponse.prototype.hasDetails = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.MockServerDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.MockServerDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.MockServerDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MockServerDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    address: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.MockServerDetails}
 */
proto.io.pact.plugin.MockServerDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.MockServerDetails;
  return proto.io.pact.plugin.MockServerDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.MockServerDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.MockServerDetails}
 */
proto.io.pact.plugin.MockServerDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.MockServerDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.MockServerDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.MockServerDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MockServerDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.io.pact.plugin.MockServerDetails.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.MockServerDetails} returns this
 */
proto.io.pact.plugin.MockServerDetails.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.io.pact.plugin.MockServerDetails.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.pact.plugin.MockServerDetails} returns this
 */
proto.io.pact.plugin.MockServerDetails.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string address = 3;
 * @return {string}
 */
proto.io.pact.plugin.MockServerDetails.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.MockServerDetails} returns this
 */
proto.io.pact.plugin.MockServerDetails.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.ShutdownMockServerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.ShutdownMockServerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.ShutdownMockServerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ShutdownMockServerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverkey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.ShutdownMockServerRequest}
 */
proto.io.pact.plugin.ShutdownMockServerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.ShutdownMockServerRequest;
  return proto.io.pact.plugin.ShutdownMockServerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.ShutdownMockServerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.ShutdownMockServerRequest}
 */
proto.io.pact.plugin.ShutdownMockServerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.ShutdownMockServerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.ShutdownMockServerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.ShutdownMockServerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ShutdownMockServerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string serverKey = 1;
 * @return {string}
 */
proto.io.pact.plugin.ShutdownMockServerRequest.prototype.getServerkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.ShutdownMockServerRequest} returns this
 */
proto.io.pact.plugin.ShutdownMockServerRequest.prototype.setServerkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.MockServerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.MockServerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.MockServerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MockServerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverkey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.MockServerRequest}
 */
proto.io.pact.plugin.MockServerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.MockServerRequest;
  return proto.io.pact.plugin.MockServerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.MockServerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.MockServerRequest}
 */
proto.io.pact.plugin.MockServerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.MockServerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.MockServerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.MockServerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MockServerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string serverKey = 1;
 * @return {string}
 */
proto.io.pact.plugin.MockServerRequest.prototype.getServerkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.MockServerRequest} returns this
 */
proto.io.pact.plugin.MockServerRequest.prototype.setServerkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.pact.plugin.MockServerResult.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.MockServerResult.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.MockServerResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.MockServerResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MockServerResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mismatchesList: jspb.Message.toObjectList(msg.getMismatchesList(),
    proto.io.pact.plugin.ContentMismatch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.MockServerResult}
 */
proto.io.pact.plugin.MockServerResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.MockServerResult;
  return proto.io.pact.plugin.MockServerResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.MockServerResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.MockServerResult}
 */
proto.io.pact.plugin.MockServerResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = new proto.io.pact.plugin.ContentMismatch;
      reader.readMessage(value,proto.io.pact.plugin.ContentMismatch.deserializeBinaryFromReader);
      msg.addMismatches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.MockServerResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.MockServerResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.MockServerResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MockServerResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMismatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.pact.plugin.ContentMismatch.serializeBinaryToWriter
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.io.pact.plugin.MockServerResult.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.MockServerResult} returns this
 */
proto.io.pact.plugin.MockServerResult.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.io.pact.plugin.MockServerResult.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.MockServerResult} returns this
 */
proto.io.pact.plugin.MockServerResult.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ContentMismatch mismatches = 3;
 * @return {!Array<!proto.io.pact.plugin.ContentMismatch>}
 */
proto.io.pact.plugin.MockServerResult.prototype.getMismatchesList = function() {
  return /** @type{!Array<!proto.io.pact.plugin.ContentMismatch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.pact.plugin.ContentMismatch, 3));
};


/**
 * @param {!Array<!proto.io.pact.plugin.ContentMismatch>} value
 * @return {!proto.io.pact.plugin.MockServerResult} returns this
*/
proto.io.pact.plugin.MockServerResult.prototype.setMismatchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.io.pact.plugin.ContentMismatch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.pact.plugin.ContentMismatch}
 */
proto.io.pact.plugin.MockServerResult.prototype.addMismatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.io.pact.plugin.ContentMismatch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.pact.plugin.MockServerResult} returns this
 */
proto.io.pact.plugin.MockServerResult.prototype.clearMismatchesList = function() {
  return this.setMismatchesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.pact.plugin.ShutdownMockServerResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.ShutdownMockServerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.ShutdownMockServerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.ShutdownMockServerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ShutdownMockServerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.io.pact.plugin.MockServerResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.ShutdownMockServerResponse}
 */
proto.io.pact.plugin.ShutdownMockServerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.ShutdownMockServerResponse;
  return proto.io.pact.plugin.ShutdownMockServerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.ShutdownMockServerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.ShutdownMockServerResponse}
 */
proto.io.pact.plugin.ShutdownMockServerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.io.pact.plugin.MockServerResult;
      reader.readMessage(value,proto.io.pact.plugin.MockServerResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.ShutdownMockServerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.ShutdownMockServerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.ShutdownMockServerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.ShutdownMockServerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.pact.plugin.MockServerResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.io.pact.plugin.ShutdownMockServerResponse.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.io.pact.plugin.ShutdownMockServerResponse} returns this
 */
proto.io.pact.plugin.ShutdownMockServerResponse.prototype.setOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated MockServerResult results = 2;
 * @return {!Array<!proto.io.pact.plugin.MockServerResult>}
 */
proto.io.pact.plugin.ShutdownMockServerResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.io.pact.plugin.MockServerResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.pact.plugin.MockServerResult, 2));
};


/**
 * @param {!Array<!proto.io.pact.plugin.MockServerResult>} value
 * @return {!proto.io.pact.plugin.ShutdownMockServerResponse} returns this
*/
proto.io.pact.plugin.ShutdownMockServerResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.io.pact.plugin.MockServerResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.pact.plugin.MockServerResult}
 */
proto.io.pact.plugin.ShutdownMockServerResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.io.pact.plugin.MockServerResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.pact.plugin.ShutdownMockServerResponse} returns this
 */
proto.io.pact.plugin.ShutdownMockServerResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.pact.plugin.MockServerResults.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.MockServerResults.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.MockServerResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.MockServerResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MockServerResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.io.pact.plugin.MockServerResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.MockServerResults}
 */
proto.io.pact.plugin.MockServerResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.MockServerResults;
  return proto.io.pact.plugin.MockServerResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.MockServerResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.MockServerResults}
 */
proto.io.pact.plugin.MockServerResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.io.pact.plugin.MockServerResult;
      reader.readMessage(value,proto.io.pact.plugin.MockServerResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.MockServerResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.MockServerResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.MockServerResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MockServerResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.pact.plugin.MockServerResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.io.pact.plugin.MockServerResults.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.io.pact.plugin.MockServerResults} returns this
 */
proto.io.pact.plugin.MockServerResults.prototype.setOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated MockServerResult results = 2;
 * @return {!Array<!proto.io.pact.plugin.MockServerResult>}
 */
proto.io.pact.plugin.MockServerResults.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.io.pact.plugin.MockServerResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.pact.plugin.MockServerResult, 2));
};


/**
 * @param {!Array<!proto.io.pact.plugin.MockServerResult>} value
 * @return {!proto.io.pact.plugin.MockServerResults} returns this
*/
proto.io.pact.plugin.MockServerResults.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.io.pact.plugin.MockServerResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.pact.plugin.MockServerResult}
 */
proto.io.pact.plugin.MockServerResults.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.io.pact.plugin.MockServerResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.pact.plugin.MockServerResults} returns this
 */
proto.io.pact.plugin.MockServerResults.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.VerificationPreparationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.VerificationPreparationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.VerificationPreparationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.VerificationPreparationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pact: jspb.Message.getFieldWithDefault(msg, 1, ""),
    interactionkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    config: (f = msg.getConfig()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.VerificationPreparationRequest}
 */
proto.io.pact.plugin.VerificationPreparationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.VerificationPreparationRequest;
  return proto.io.pact.plugin.VerificationPreparationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.VerificationPreparationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.VerificationPreparationRequest}
 */
proto.io.pact.plugin.VerificationPreparationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPact(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractionkey(value);
      break;
    case 3:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.VerificationPreparationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.VerificationPreparationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.VerificationPreparationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.VerificationPreparationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPact();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInteractionkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string pact = 1;
 * @return {string}
 */
proto.io.pact.plugin.VerificationPreparationRequest.prototype.getPact = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.VerificationPreparationRequest} returns this
 */
proto.io.pact.plugin.VerificationPreparationRequest.prototype.setPact = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string interactionKey = 2;
 * @return {string}
 */
proto.io.pact.plugin.VerificationPreparationRequest.prototype.getInteractionkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.VerificationPreparationRequest} returns this
 */
proto.io.pact.plugin.VerificationPreparationRequest.prototype.setInteractionkey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Struct config = 3;
 * @return {?proto.google.protobuf.Struct}
 */
proto.io.pact.plugin.VerificationPreparationRequest.prototype.getConfig = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 3));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.io.pact.plugin.VerificationPreparationRequest} returns this
*/
proto.io.pact.plugin.VerificationPreparationRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.VerificationPreparationRequest} returns this
 */
proto.io.pact.plugin.VerificationPreparationRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.VerificationPreparationRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.pact.plugin.MetadataValue.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.io.pact.plugin.MetadataValue.ValueCase = {
  VALUE_NOT_SET: 0,
  NONBINARYVALUE: 1,
  BINARYVALUE: 2
};

/**
 * @return {proto.io.pact.plugin.MetadataValue.ValueCase}
 */
proto.io.pact.plugin.MetadataValue.prototype.getValueCase = function() {
  return /** @type {proto.io.pact.plugin.MetadataValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.io.pact.plugin.MetadataValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.MetadataValue.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.MetadataValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.MetadataValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MetadataValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonbinaryvalue: (f = msg.getNonbinaryvalue()) && google_protobuf_struct_pb.Value.toObject(includeInstance, f),
    binaryvalue: msg.getBinaryvalue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.MetadataValue}
 */
proto.io.pact.plugin.MetadataValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.MetadataValue;
  return proto.io.pact.plugin.MetadataValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.MetadataValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.MetadataValue}
 */
proto.io.pact.plugin.MetadataValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Value;
      reader.readMessage(value,google_protobuf_struct_pb.Value.deserializeBinaryFromReader);
      msg.setNonbinaryvalue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBinaryvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.MetadataValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.MetadataValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.MetadataValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.MetadataValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonbinaryvalue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Value.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Value nonBinaryValue = 1;
 * @return {?proto.google.protobuf.Value}
 */
proto.io.pact.plugin.MetadataValue.prototype.getNonbinaryvalue = function() {
  return /** @type{?proto.google.protobuf.Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Value, 1));
};


/**
 * @param {?proto.google.protobuf.Value|undefined} value
 * @return {!proto.io.pact.plugin.MetadataValue} returns this
*/
proto.io.pact.plugin.MetadataValue.prototype.setNonbinaryvalue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.io.pact.plugin.MetadataValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.MetadataValue} returns this
 */
proto.io.pact.plugin.MetadataValue.prototype.clearNonbinaryvalue = function() {
  return this.setNonbinaryvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.MetadataValue.prototype.hasNonbinaryvalue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes binaryValue = 2;
 * @return {!(string|Uint8Array)}
 */
proto.io.pact.plugin.MetadataValue.prototype.getBinaryvalue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes binaryValue = 2;
 * This is a type-conversion wrapper around `getBinaryvalue()`
 * @return {string}
 */
proto.io.pact.plugin.MetadataValue.prototype.getBinaryvalue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBinaryvalue()));
};


/**
 * optional bytes binaryValue = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinaryvalue()`
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.MetadataValue.prototype.getBinaryvalue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBinaryvalue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.io.pact.plugin.MetadataValue} returns this
 */
proto.io.pact.plugin.MetadataValue.prototype.setBinaryvalue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.io.pact.plugin.MetadataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.pact.plugin.MetadataValue} returns this
 */
proto.io.pact.plugin.MetadataValue.prototype.clearBinaryvalue = function() {
  return jspb.Message.setOneofField(this, 2, proto.io.pact.plugin.MetadataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.MetadataValue.prototype.hasBinaryvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.InteractionData.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.InteractionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.InteractionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.InteractionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: (f = msg.getBody()) && proto.io.pact.plugin.Body.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, proto.io.pact.plugin.MetadataValue.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.InteractionData}
 */
proto.io.pact.plugin.InteractionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.InteractionData;
  return proto.io.pact.plugin.InteractionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.InteractionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.InteractionData}
 */
proto.io.pact.plugin.InteractionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.pact.plugin.Body;
      reader.readMessage(value,proto.io.pact.plugin.Body.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 2:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.io.pact.plugin.MetadataValue.deserializeBinaryFromReader, "", new proto.io.pact.plugin.MetadataValue());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.InteractionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.InteractionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.InteractionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.InteractionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.pact.plugin.Body.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.io.pact.plugin.MetadataValue.serializeBinaryToWriter);
  }
};


/**
 * optional Body body = 1;
 * @return {?proto.io.pact.plugin.Body}
 */
proto.io.pact.plugin.InteractionData.prototype.getBody = function() {
  return /** @type{?proto.io.pact.plugin.Body} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.Body, 1));
};


/**
 * @param {?proto.io.pact.plugin.Body|undefined} value
 * @return {!proto.io.pact.plugin.InteractionData} returns this
*/
proto.io.pact.plugin.InteractionData.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.InteractionData} returns this
 */
proto.io.pact.plugin.InteractionData.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.InteractionData.prototype.hasBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, MetadataValue> metadata = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.io.pact.plugin.MetadataValue>}
 */
proto.io.pact.plugin.InteractionData.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.io.pact.plugin.MetadataValue>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.io.pact.plugin.MetadataValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.pact.plugin.InteractionData} returns this
 */
proto.io.pact.plugin.InteractionData.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.pact.plugin.VerificationPreparationResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.io.pact.plugin.VerificationPreparationResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  ERROR: 1,
  INTERACTIONDATA: 2
};

/**
 * @return {proto.io.pact.plugin.VerificationPreparationResponse.ResponseCase}
 */
proto.io.pact.plugin.VerificationPreparationResponse.prototype.getResponseCase = function() {
  return /** @type {proto.io.pact.plugin.VerificationPreparationResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.io.pact.plugin.VerificationPreparationResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.VerificationPreparationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.VerificationPreparationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.VerificationPreparationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.VerificationPreparationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    interactiondata: (f = msg.getInteractiondata()) && proto.io.pact.plugin.InteractionData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.VerificationPreparationResponse}
 */
proto.io.pact.plugin.VerificationPreparationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.VerificationPreparationResponse;
  return proto.io.pact.plugin.VerificationPreparationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.VerificationPreparationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.VerificationPreparationResponse}
 */
proto.io.pact.plugin.VerificationPreparationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = new proto.io.pact.plugin.InteractionData;
      reader.readMessage(value,proto.io.pact.plugin.InteractionData.deserializeBinaryFromReader);
      msg.setInteractiondata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.VerificationPreparationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.VerificationPreparationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.VerificationPreparationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.VerificationPreparationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInteractiondata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.pact.plugin.InteractionData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.io.pact.plugin.VerificationPreparationResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.VerificationPreparationResponse} returns this
 */
proto.io.pact.plugin.VerificationPreparationResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.io.pact.plugin.VerificationPreparationResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.pact.plugin.VerificationPreparationResponse} returns this
 */
proto.io.pact.plugin.VerificationPreparationResponse.prototype.clearError = function() {
  return jspb.Message.setOneofField(this, 1, proto.io.pact.plugin.VerificationPreparationResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.VerificationPreparationResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InteractionData interactionData = 2;
 * @return {?proto.io.pact.plugin.InteractionData}
 */
proto.io.pact.plugin.VerificationPreparationResponse.prototype.getInteractiondata = function() {
  return /** @type{?proto.io.pact.plugin.InteractionData} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.InteractionData, 2));
};


/**
 * @param {?proto.io.pact.plugin.InteractionData|undefined} value
 * @return {!proto.io.pact.plugin.VerificationPreparationResponse} returns this
*/
proto.io.pact.plugin.VerificationPreparationResponse.prototype.setInteractiondata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.io.pact.plugin.VerificationPreparationResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.VerificationPreparationResponse} returns this
 */
proto.io.pact.plugin.VerificationPreparationResponse.prototype.clearInteractiondata = function() {
  return this.setInteractiondata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.VerificationPreparationResponse.prototype.hasInteractiondata = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.VerifyInteractionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.VerifyInteractionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.VerifyInteractionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.VerifyInteractionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    interactiondata: (f = msg.getInteractiondata()) && proto.io.pact.plugin.InteractionData.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    pact: jspb.Message.getFieldWithDefault(msg, 3, ""),
    interactionkey: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.VerifyInteractionRequest}
 */
proto.io.pact.plugin.VerifyInteractionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.VerifyInteractionRequest;
  return proto.io.pact.plugin.VerifyInteractionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.VerifyInteractionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.VerifyInteractionRequest}
 */
proto.io.pact.plugin.VerifyInteractionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.pact.plugin.InteractionData;
      reader.readMessage(value,proto.io.pact.plugin.InteractionData.deserializeBinaryFromReader);
      msg.setInteractiondata(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPact(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractionkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.VerifyInteractionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.VerifyInteractionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.VerifyInteractionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.VerifyInteractionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteractiondata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.pact.plugin.InteractionData.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getPact();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInteractionkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional InteractionData interactionData = 1;
 * @return {?proto.io.pact.plugin.InteractionData}
 */
proto.io.pact.plugin.VerifyInteractionRequest.prototype.getInteractiondata = function() {
  return /** @type{?proto.io.pact.plugin.InteractionData} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.InteractionData, 1));
};


/**
 * @param {?proto.io.pact.plugin.InteractionData|undefined} value
 * @return {!proto.io.pact.plugin.VerifyInteractionRequest} returns this
*/
proto.io.pact.plugin.VerifyInteractionRequest.prototype.setInteractiondata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.VerifyInteractionRequest} returns this
 */
proto.io.pact.plugin.VerifyInteractionRequest.prototype.clearInteractiondata = function() {
  return this.setInteractiondata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.VerifyInteractionRequest.prototype.hasInteractiondata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Struct config = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.io.pact.plugin.VerifyInteractionRequest.prototype.getConfig = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.io.pact.plugin.VerifyInteractionRequest} returns this
*/
proto.io.pact.plugin.VerifyInteractionRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.VerifyInteractionRequest} returns this
 */
proto.io.pact.plugin.VerifyInteractionRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.VerifyInteractionRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string pact = 3;
 * @return {string}
 */
proto.io.pact.plugin.VerifyInteractionRequest.prototype.getPact = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.VerifyInteractionRequest} returns this
 */
proto.io.pact.plugin.VerifyInteractionRequest.prototype.setPact = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string interactionKey = 4;
 * @return {string}
 */
proto.io.pact.plugin.VerifyInteractionRequest.prototype.getInteractionkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.VerifyInteractionRequest} returns this
 */
proto.io.pact.plugin.VerifyInteractionRequest.prototype.setInteractionkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.pact.plugin.VerificationResultItem.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.io.pact.plugin.VerificationResultItem.ResultCase = {
  RESULT_NOT_SET: 0,
  ERROR: 1,
  MISMATCH: 2
};

/**
 * @return {proto.io.pact.plugin.VerificationResultItem.ResultCase}
 */
proto.io.pact.plugin.VerificationResultItem.prototype.getResultCase = function() {
  return /** @type {proto.io.pact.plugin.VerificationResultItem.ResultCase} */(jspb.Message.computeOneofCase(this, proto.io.pact.plugin.VerificationResultItem.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.VerificationResultItem.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.VerificationResultItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.VerificationResultItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.VerificationResultItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mismatch: (f = msg.getMismatch()) && proto.io.pact.plugin.ContentMismatch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.VerificationResultItem}
 */
proto.io.pact.plugin.VerificationResultItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.VerificationResultItem;
  return proto.io.pact.plugin.VerificationResultItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.VerificationResultItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.VerificationResultItem}
 */
proto.io.pact.plugin.VerificationResultItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = new proto.io.pact.plugin.ContentMismatch;
      reader.readMessage(value,proto.io.pact.plugin.ContentMismatch.deserializeBinaryFromReader);
      msg.setMismatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.VerificationResultItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.VerificationResultItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.VerificationResultItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.VerificationResultItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMismatch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.pact.plugin.ContentMismatch.serializeBinaryToWriter
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.io.pact.plugin.VerificationResultItem.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.VerificationResultItem} returns this
 */
proto.io.pact.plugin.VerificationResultItem.prototype.setError = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.io.pact.plugin.VerificationResultItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.pact.plugin.VerificationResultItem} returns this
 */
proto.io.pact.plugin.VerificationResultItem.prototype.clearError = function() {
  return jspb.Message.setOneofField(this, 1, proto.io.pact.plugin.VerificationResultItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.VerificationResultItem.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ContentMismatch mismatch = 2;
 * @return {?proto.io.pact.plugin.ContentMismatch}
 */
proto.io.pact.plugin.VerificationResultItem.prototype.getMismatch = function() {
  return /** @type{?proto.io.pact.plugin.ContentMismatch} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.ContentMismatch, 2));
};


/**
 * @param {?proto.io.pact.plugin.ContentMismatch|undefined} value
 * @return {!proto.io.pact.plugin.VerificationResultItem} returns this
*/
proto.io.pact.plugin.VerificationResultItem.prototype.setMismatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.io.pact.plugin.VerificationResultItem.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.VerificationResultItem} returns this
 */
proto.io.pact.plugin.VerificationResultItem.prototype.clearMismatch = function() {
  return this.setMismatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.VerificationResultItem.prototype.hasMismatch = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.pact.plugin.VerificationResult.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.VerificationResult.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.VerificationResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.VerificationResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.VerificationResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    responsedata: (f = msg.getResponsedata()) && proto.io.pact.plugin.InteractionData.toObject(includeInstance, f),
    mismatchesList: jspb.Message.toObjectList(msg.getMismatchesList(),
    proto.io.pact.plugin.VerificationResultItem.toObject, includeInstance),
    outputList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.VerificationResult}
 */
proto.io.pact.plugin.VerificationResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.VerificationResult;
  return proto.io.pact.plugin.VerificationResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.VerificationResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.VerificationResult}
 */
proto.io.pact.plugin.VerificationResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.io.pact.plugin.InteractionData;
      reader.readMessage(value,proto.io.pact.plugin.InteractionData.deserializeBinaryFromReader);
      msg.setResponsedata(value);
      break;
    case 3:
      var value = new proto.io.pact.plugin.VerificationResultItem;
      reader.readMessage(value,proto.io.pact.plugin.VerificationResultItem.deserializeBinaryFromReader);
      msg.addMismatches(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.VerificationResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.VerificationResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.VerificationResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.VerificationResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getResponsedata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.pact.plugin.InteractionData.serializeBinaryToWriter
    );
  }
  f = message.getMismatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.pact.plugin.VerificationResultItem.serializeBinaryToWriter
    );
  }
  f = message.getOutputList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.io.pact.plugin.VerificationResult.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.io.pact.plugin.VerificationResult} returns this
 */
proto.io.pact.plugin.VerificationResult.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional InteractionData responseData = 2;
 * @return {?proto.io.pact.plugin.InteractionData}
 */
proto.io.pact.plugin.VerificationResult.prototype.getResponsedata = function() {
  return /** @type{?proto.io.pact.plugin.InteractionData} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.InteractionData, 2));
};


/**
 * @param {?proto.io.pact.plugin.InteractionData|undefined} value
 * @return {!proto.io.pact.plugin.VerificationResult} returns this
*/
proto.io.pact.plugin.VerificationResult.prototype.setResponsedata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.VerificationResult} returns this
 */
proto.io.pact.plugin.VerificationResult.prototype.clearResponsedata = function() {
  return this.setResponsedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.VerificationResult.prototype.hasResponsedata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated VerificationResultItem mismatches = 3;
 * @return {!Array<!proto.io.pact.plugin.VerificationResultItem>}
 */
proto.io.pact.plugin.VerificationResult.prototype.getMismatchesList = function() {
  return /** @type{!Array<!proto.io.pact.plugin.VerificationResultItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.pact.plugin.VerificationResultItem, 3));
};


/**
 * @param {!Array<!proto.io.pact.plugin.VerificationResultItem>} value
 * @return {!proto.io.pact.plugin.VerificationResult} returns this
*/
proto.io.pact.plugin.VerificationResult.prototype.setMismatchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.io.pact.plugin.VerificationResultItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.pact.plugin.VerificationResultItem}
 */
proto.io.pact.plugin.VerificationResult.prototype.addMismatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.io.pact.plugin.VerificationResultItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.pact.plugin.VerificationResult} returns this
 */
proto.io.pact.plugin.VerificationResult.prototype.clearMismatchesList = function() {
  return this.setMismatchesList([]);
};


/**
 * repeated string output = 4;
 * @return {!Array<string>}
 */
proto.io.pact.plugin.VerificationResult.prototype.getOutputList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.io.pact.plugin.VerificationResult} returns this
 */
proto.io.pact.plugin.VerificationResult.prototype.setOutputList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.io.pact.plugin.VerificationResult} returns this
 */
proto.io.pact.plugin.VerificationResult.prototype.addOutput = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.pact.plugin.VerificationResult} returns this
 */
proto.io.pact.plugin.VerificationResult.prototype.clearOutputList = function() {
  return this.setOutputList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.pact.plugin.VerifyInteractionResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.io.pact.plugin.VerifyInteractionResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  ERROR: 1,
  RESULT: 2
};

/**
 * @return {proto.io.pact.plugin.VerifyInteractionResponse.ResponseCase}
 */
proto.io.pact.plugin.VerifyInteractionResponse.prototype.getResponseCase = function() {
  return /** @type {proto.io.pact.plugin.VerifyInteractionResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.io.pact.plugin.VerifyInteractionResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.pact.plugin.VerifyInteractionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.pact.plugin.VerifyInteractionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.pact.plugin.VerifyInteractionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.VerifyInteractionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    result: (f = msg.getResult()) && proto.io.pact.plugin.VerificationResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.pact.plugin.VerifyInteractionResponse}
 */
proto.io.pact.plugin.VerifyInteractionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.pact.plugin.VerifyInteractionResponse;
  return proto.io.pact.plugin.VerifyInteractionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.pact.plugin.VerifyInteractionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.pact.plugin.VerifyInteractionResponse}
 */
proto.io.pact.plugin.VerifyInteractionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = new proto.io.pact.plugin.VerificationResult;
      reader.readMessage(value,proto.io.pact.plugin.VerificationResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.pact.plugin.VerifyInteractionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.pact.plugin.VerifyInteractionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.pact.plugin.VerifyInteractionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.pact.plugin.VerifyInteractionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.pact.plugin.VerificationResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.io.pact.plugin.VerifyInteractionResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.pact.plugin.VerifyInteractionResponse} returns this
 */
proto.io.pact.plugin.VerifyInteractionResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.io.pact.plugin.VerifyInteractionResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.pact.plugin.VerifyInteractionResponse} returns this
 */
proto.io.pact.plugin.VerifyInteractionResponse.prototype.clearError = function() {
  return jspb.Message.setOneofField(this, 1, proto.io.pact.plugin.VerifyInteractionResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.VerifyInteractionResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VerificationResult result = 2;
 * @return {?proto.io.pact.plugin.VerificationResult}
 */
proto.io.pact.plugin.VerifyInteractionResponse.prototype.getResult = function() {
  return /** @type{?proto.io.pact.plugin.VerificationResult} */ (
    jspb.Message.getWrapperField(this, proto.io.pact.plugin.VerificationResult, 2));
};


/**
 * @param {?proto.io.pact.plugin.VerificationResult|undefined} value
 * @return {!proto.io.pact.plugin.VerifyInteractionResponse} returns this
*/
proto.io.pact.plugin.VerifyInteractionResponse.prototype.setResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.io.pact.plugin.VerifyInteractionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.pact.plugin.VerifyInteractionResponse} returns this
 */
proto.io.pact.plugin.VerifyInteractionResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.pact.plugin.VerifyInteractionResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


export const Body = proto.io.pact.plugin.Body;
export const Catalogue = proto.io.pact.plugin.Catalogue;
export const CatalogueEntry = proto.io.pact.plugin.CatalogueEntry;
export const CompareContentsRequest = proto.io.pact.plugin.CompareContentsRequest;
export const CompareContentsResponse = proto.io.pact.plugin.CompareContentsResponse;
export const ConfigureInteractionRequest = proto.io.pact.plugin.ConfigureInteractionRequest;
export const ConfigureInteractionResponse = proto.io.pact.plugin.ConfigureInteractionResponse;
export const ContentMismatch = proto.io.pact.plugin.ContentMismatch;
export const ContentMismatches = proto.io.pact.plugin.ContentMismatches;
export const ContentTypeMismatch = proto.io.pact.plugin.ContentTypeMismatch;
export const GenerateContentRequest = proto.io.pact.plugin.GenerateContentRequest;
export const GenerateContentResponse = proto.io.pact.plugin.GenerateContentResponse;
export const Generator = proto.io.pact.plugin.Generator;
export const InitPluginRequest = proto.io.pact.plugin.InitPluginRequest;
export const InitPluginResponse = proto.io.pact.plugin.InitPluginResponse;
export const InteractionData = proto.io.pact.plugin.InteractionData;
export const InteractionResponse = proto.io.pact.plugin.InteractionResponse;
export const MatchingRule = proto.io.pact.plugin.MatchingRule;
export const MatchingRules = proto.io.pact.plugin.MatchingRules;
export const MetadataValue = proto.io.pact.plugin.MetadataValue;
export const MockServerDetails = proto.io.pact.plugin.MockServerDetails;
export const MockServerRequest = proto.io.pact.plugin.MockServerRequest;
export const MockServerResult = proto.io.pact.plugin.MockServerResult;
export const MockServerResults = proto.io.pact.plugin.MockServerResults;
export const PluginConfiguration = proto.io.pact.plugin.PluginConfiguration;
export const ShutdownMockServerRequest = proto.io.pact.plugin.ShutdownMockServerRequest;
export const ShutdownMockServerResponse = proto.io.pact.plugin.ShutdownMockServerResponse;
export const StartMockServerRequest = proto.io.pact.plugin.StartMockServerRequest;
export const StartMockServerResponse = proto.io.pact.plugin.StartMockServerResponse;
export const VerificationPreparationRequest = proto.io.pact.plugin.VerificationPreparationRequest;
export const VerificationPreparationResponse = proto.io.pact.plugin.VerificationPreparationResponse;
export const VerificationResult = proto.io.pact.plugin.VerificationResult;
export const VerificationResultItem = proto.io.pact.plugin.VerificationResultItem;
export const VerifyInteractionRequest = proto.io.pact.plugin.VerifyInteractionRequest;
export const VerifyInteractionResponse = proto.io.pact.plugin.VerifyInteractionResponse;
